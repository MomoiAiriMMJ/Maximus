[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# yes this really sucked to implement

    # Hook into Campfire
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Campfire' and not context.blueprint then
    self.ability.x_mult = self.ability.x_mult + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Campfire' and not context.blueprint then
    self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Flash Card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Flash Card' and not context.blueprint then
    self.ability.mult = self.ability.mult + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Flash Card' and not context.blueprint then
    self.ability.mult = self:scale_value(self.ability.mult, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Red Card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Red Card' and not context.blueprint then
    self.ability.mult = self.ability.mult + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Red Card' and not context.blueprint then
    self.ability.mult = self:scale_value(self.ability.mult, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Hologram
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Hologram' and (not context.blueprint)
    and context.cards and context.cards[1] then
        self.ability.x_mult = self.ability.x_mult + #context.cards*self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Hologram' and (not context.blueprint)
    and context.cards and context.cards[1] then
        self.ability.x_mult = self:scale_value(self.ability.x_mult, #context.cards*self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Madness
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Madness' and not context.blueprint and not context.blind.boss then
    self.ability.x_mult = self.ability.x_mult + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Madness' and not context.blueprint and not context.blind.boss then
    self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Ceremonial Dagger
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.mult = self.ability.mult + sliced_card.sell_cost*2
'''
position = "at"
payload = '''
self.ability.mult = self:scale_value(self.ability.mult, sliced_card.sell_cost*2)
'''
match_indent = true
times = 1


    # Hook into Canio
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.caino_xmult = self.ability.caino_xmult + faces*self.ability.extra
'''
position = "at"
payload = '''
self.ability.caino_xmult = self:scale_value(self.ability.caino_xmult, faces*self.ability.extra)
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.caino_xmult = self.ability.caino_xmult + face_cards*self.ability.extra
'''
position = "at"
payload = '''
self.ability.caino_xmult = self:scale_value(self.ability.caino_xmult, face_cards*self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Glass Joker
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.x_mult = self.ability.x_mult + self.ability.extra*glasses
'''
position = "at"
payload = '''
self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra*glasses)
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.x_mult = self.ability.x_mult + self.ability.extra*glass_cards
'''
position = "at"
payload = '''
self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra*glass_cards)
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.x_mult = self.ability.x_mult + self.ability.extra*shattered_glass
'''
position = "at"
payload = '''
self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra*shattered_glass)
'''
match_indent = true
times = 1


    # Hook into Constellation
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Constellation' and not context.blueprint and context.consumeable.ability.set == 'Planet' then
    self.ability.x_mult = self.ability.x_mult + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Constellation' and not context.blueprint and context.consumeable.ability.set == 'Planet' then
    self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Yorick
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Yorick' and not context.blueprint then
    if self.ability.yorick_discards <= 1 then
        self.ability.yorick_discards = self.ability.extra.discards
        self.ability.x_mult = self.ability.x_mult + self.ability.extra.xmult
'''
position = "at"
payload = '''
if self.ability.name == 'Yorick' and not context.blueprint then
    if self.ability.yorick_discards <= 1 then
        self.ability.yorick_discards = self.ability.extra.discards
        self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra.xmult)
'''
match_indent = true
times = 1


    # Hook into Castle
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
context.other_card:is_suit(G.GAME.current_round.castle_card.suit) and not context.blueprint then
    self.ability.extra.chips = self.ability.extra.chips + self.ability.extra.chip_mod
'''
position = "at"
payload = '''
context.other_card:is_suit(G.GAME.current_round.castle_card.suit) and not context.blueprint then
    self.ability.extra.chips = self:scale_value(self.ability.extra.chips, self.ability.extra.chip_mod)
'''
match_indent = true
times = 1


    # Hook into Hit the Road
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Hit the Road' and
not context.other_card.debuff and
context.other_card:get_id() == 11 and not context.blueprint then
    self.ability.x_mult = self.ability.x_mult + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Hit the Road' and
not context.other_card.debuff and
context.other_card:get_id() == 11 and not context.blueprint then
    self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Rocket
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Rocket' and G.GAME.blind.boss then
    self.ability.extra.dollars = self.ability.extra.dollars + self.ability.extra.increase
'''
position = "at"
payload = '''
if self.ability.name == 'Rocket' and G.GAME.blind.boss then
    self.ability.extra.dollars = self:scale_value(self.ability.extra.dollars, self.ability.extra.increase)
'''
match_indent = true
times = 1


    # Hook into Egg
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Egg' then
    self.ability.extra_value = self.ability.extra_value + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Egg' then
    self.ability.extra_value = self:scale_value(self.ability.extra_value, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Gift Card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
for k, v in ipairs(G.jokers.cards) do
    if v.set_cost then 
        v.ability.extra_value = (v.ability.extra_value or 0) + self.ability.extra
        v:set_cost()
    end
end
for k, v in ipairs(G.consumeables.cards) do
    if v.set_cost then 
        v.ability.extra_value = (v.ability.extra_value or 0) + self.ability.extra
        v:set_cost()
    end
end
'''
position = "at"
payload = '''
for k, v in ipairs(G.jokers.cards) do
    if v.set_cost then 
        v.ability.extra_value = self:scale_value((v.ability.extra_value or 0), self.ability.extra)
        v:set_cost()
    end
end
for k, v in ipairs(G.consumeables.cards) do
    if v.set_cost then 
        v.ability.extra_value = self:scale_value((v.ability.extra_value or 0), self.ability.extra)
        v:set_cost()
    end
end
'''
match_indent = true
times = 1


    # Hook into Lucky Cat
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Lucky Cat' and context.other_card.lucky_trigger and not context.blueprint then
    self.ability.x_mult = self.ability.x_mult + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Lucky Cat' and context.other_card.lucky_trigger and not context.blueprint then
    self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Wee joker
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Wee Joker' and
    context.other_card:get_id() == 2 and not context.blueprint then
        self.ability.extra.chips = self.ability.extra.chips + self.ability.extra.chip_mod
'''
position = "at"
payload = '''
if self.ability.name == 'Wee Joker' and
    context.other_card:get_id() == 2 and not context.blueprint then
        self.ability.extra.chips = self:scale_value(self.ability.extra.chips, self.ability.extra.chip_mod)
'''
match_indent = true
times = 1


    # Hook into Spare Trousers
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Spare Trousers' and (next(context.poker_hands['Two Pair']) or next(context.poker_hands['Full House'])) and not context.blueprint then
    self.ability.mult = self.ability.mult + self.ability.extra
'''
position = "at"
payload = '''
if self.ability.name == 'Spare Trousers' and (next(context.poker_hands['Two Pair']) or next(context.poker_hands['Full House'])) and not context.blueprint then
    self.ability.mult = self:scale_value(self.ability.mult, self.ability.extra)
'''
match_indent = true
times = 1


    # Hook into Square Joker
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Square Joker' and #context.full_hand == 4 and not context.blueprint then
    self.ability.extra.chips = self.ability.extra.chips + self.ability.extra.chip_mod
'''
position = "at"
payload = '''
if self.ability.name == 'Square Joker' and #context.full_hand == 4 and not context.blueprint then
    self.ability.extra.chips = self:scale_value(self.ability.extra.chips, self.ability.extra.chip_mod)
'''
match_indent = true
times = 1


    # Hook into Runner
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Runner' and next(context.poker_hands['Straight']) and not context.blueprint then
    self.ability.extra.chips = self.ability.extra.chips + self.ability.extra.chip_mod
'''
position = "at"
payload = '''
if self.ability.name == 'Runner' and next(context.poker_hands['Straight']) and not context.blueprint then
    self.ability.extra.chips = self:scale_value(self.ability.extra.chips, self.ability.extra.chip_mod)
'''
match_indent = true
times = 1


    # Hook into Vampire
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if #enhanced > 0 then 
    self.ability.x_mult = self.ability.x_mult + self.ability.extra*#enhanced
'''
position = "at"
payload = '''
if #enhanced > 0 then 
    self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra*#enhanced)
'''
match_indent = true
times = 1


    # Hook into Ride the Bus
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Ride the Bus' and not context.blueprint then
    local faces = false
    for i = 1, #context.scoring_hand do
        if context.scoring_hand[i]:is_face() then faces = true end
    end
    if faces then
        local last_mult = self.ability.mult
        self.ability.mult = 0
        if last_mult > 0 then 
            return {
                card = self,
                message = localize('k_reset')
            }
        end
    else
        self.ability.mult = self.ability.mult + self.ability.extra
    end
'''
position = "at"
payload = '''
if self.ability.name == 'Ride the Bus' and not context.blueprint then
    local faces = false
    for i = 1, #context.scoring_hand do
        if context.scoring_hand[i]:is_face() then faces = true end
    end
    if faces then
        local last_mult = self.ability.mult
        self.ability.mult = 0
        if last_mult > 0 then 
            return {
                card = self,
                message = localize('k_reset')
            }
        end
    else
        self.ability.mult = self:scale_value(self.ability.mult, self.ability.extra)
    end
'''
match_indent = true
times = 1


    # Hook into Obelisk
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Obelisk' and not context.blueprint then
    local reset = true
    local play_more_than = (G.GAME.hands[context.scoring_name].played or 0)
    for k, v in pairs(G.GAME.hands) do
        if k ~= context.scoring_name and v.played >= play_more_than and v.visible then
            reset = false
        end
    end
    if reset then
        if self.ability.x_mult > 1 then
            self.ability.x_mult = 1
            return {
                card = self,
                message = localize('k_reset')
            }
        end
    else
        self.ability.x_mult = self.ability.x_mult + self.ability.extra
    end
'''
position = "at"
payload = '''
if self.ability.name == 'Obelisk' and not context.blueprint then
    local reset = true
    local play_more_than = (G.GAME.hands[context.scoring_name].played or 0)
    for k, v in pairs(G.GAME.hands) do
        if k ~= context.scoring_name and v.played >= play_more_than and v.visible then
            reset = false
        end
    end
    if reset then
        if self.ability.x_mult > 1 then
            self.ability.x_mult = 1
            return {
                card = self,
                message = localize('k_reset')
            }
        end
    else
        self.ability.x_mult = self:scale_value(self.ability.x_mult, self.ability.extra)
    end
'''
match_indent = true
times = 1


    # Hook into Green Joker
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Green Joker' and not context.blueprint then
    self.ability.mult = self.ability.mult + self.ability.extra.hand_add
'''
position = "at"
payload = '''
if self.ability.name == 'Green Joker' and not context.blueprint then
    self.ability.mult = self:scale_value(self.ability.mult, self.ability.extra.hand_add)
'''
match_indent = true
times = 1