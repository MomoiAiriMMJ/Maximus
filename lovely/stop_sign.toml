[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

    # Hook into rotating cards in common_events
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
function reset_idol_card()
    G.GAME.current_round.idol_card.rank = 'Ace'
    G.GAME.current_round.idol_card.suit = 'Spades'
    local valid_idol_cards = {}
    for k, v in ipairs(G.playing_cards) do
        if v.ability.effect ~= 'Stone Card' then
            if not SMODS.has_no_suit(v) and not SMODS.has_no_rank(v) then
                valid_idol_cards[#valid_idol_cards+1] = v
            end
        end
    end
    if valid_idol_cards[1] then 
        local idol_card = pseudorandom_element(valid_idol_cards, pseudoseed('idol'..G.GAME.round_resets.ante))
        G.GAME.current_round.idol_card.rank = idol_card.base.value
        G.GAME.current_round.idol_card.suit = idol_card.base.suit
        G.GAME.current_round.idol_card.id = idol_card.base.id
    end
end

function reset_mail_rank()
    G.GAME.current_round.mail_card.rank = 'Ace'
    local valid_mail_cards = {}
    for k, v in ipairs(G.playing_cards) do
        if v.ability.effect ~= 'Stone Card' then
            if not SMODS.has_no_rank(v) then
                valid_mail_cards[#valid_mail_cards+1] = v
            end
        end
    end
    if valid_mail_cards[1] then 
        local mail_card = pseudorandom_element(valid_mail_cards, pseudoseed('mail'..G.GAME.round_resets.ante))
        G.GAME.current_round.mail_card.rank = mail_card.base.value
        G.GAME.current_round.mail_card.id = mail_card.base.id
    end
end

function reset_ancient_card()
    local ancient_suits = {}
    for k, v in ipairs({'Spades','Hearts','Clubs','Diamonds'}) do
        if v ~= G.GAME.current_round.ancient_card.suit then ancient_suits[#ancient_suits + 1] = v end
    end
    local ancient_card = pseudorandom_element(ancient_suits, pseudoseed('anc'..G.GAME.round_resets.ante))
    G.GAME.current_round.ancient_card.suit = ancient_card
end

function reset_castle_card()
    G.GAME.current_round.castle_card.suit = 'Spades'
    local valid_castle_cards = {}
    for k, v in ipairs(G.playing_cards) do
        if v.ability.effect ~= 'Stone Card' then
            if not SMODS.has_no_suit(v) then
                valid_castle_cards[#valid_castle_cards+1] = v
            end
        end
    end
    if valid_castle_cards[1] then 
        local castle_card = pseudorandom_element(valid_castle_cards, pseudoseed('cas'..G.GAME.round_resets.ante))
        G.GAME.current_round.castle_card.suit = castle_card.base.suit
    end
end
'''
position = "at"
payload = '''
function reset_idol_card()
    if not next(SMODS.find_card('j_mxms_stop_sign')) and G.GAME.round ~= 1 then
        G.GAME.current_round.idol_card.rank = 'Ace'
        G.GAME.current_round.idol_card.suit = 'Spades'
        local valid_idol_cards = {}
        for k, v in ipairs(G.playing_cards) do
            if v.ability.effect ~= 'Stone Card' then
                if not SMODS.has_no_suit(v) and not SMODS.has_no_rank(v) then
                    valid_idol_cards[#valid_idol_cards+1] = v
                end
            end
        end
        if valid_idol_cards[1] then 
            local idol_card = pseudorandom_element(valid_idol_cards, pseudoseed('idol'..G.GAME.round_resets.ante))
            G.GAME.current_round.idol_card.rank = idol_card.base.value
            G.GAME.current_round.idol_card.suit = idol_card.base.suit
            G.GAME.current_round.idol_card.id = idol_card.base.id
        end
    end
end

function reset_mail_rank()
    if not next(SMODS.find_card('j_mxms_stop_sign')) and G.GAME.round ~= 1 then
        G.GAME.current_round.mail_card.rank = 'Ace'
        local valid_mail_cards = {}
        for k, v in ipairs(G.playing_cards) do
            if v.ability.effect ~= 'Stone Card' then
                if not SMODS.has_no_rank(v) then
                    valid_mail_cards[#valid_mail_cards+1] = v
                end
            end
        end
        if valid_mail_cards[1] then 
            local mail_card = pseudorandom_element(valid_mail_cards, pseudoseed('mail'..G.GAME.round_resets.ante))
            G.GAME.current_round.mail_card.rank = mail_card.base.value
            G.GAME.current_round.mail_card.id = mail_card.base.id
        end
    end
end

function reset_ancient_card()
    if not next(SMODS.find_card('j_mxms_stop_sign')) and G.GAME.round ~= 1 then
        local ancient_suits = {}
        for k, v in ipairs({'Spades','Hearts','Clubs','Diamonds'}) do
            if v ~= G.GAME.current_round.ancient_card.suit then ancient_suits[#ancient_suits + 1] = v end
        end
        local ancient_card = pseudorandom_element(ancient_suits, pseudoseed('anc'..G.GAME.round_resets.ante))
        G.GAME.current_round.ancient_card.suit = ancient_card
    end
end

function reset_castle_card()
    if not next(SMODS.find_card('j_mxms_stop_sign')) and G.GAME.round ~= 1 then
        G.GAME.current_round.castle_card.suit = 'Spades'
        local valid_castle_cards = {}
        for k, v in ipairs(G.playing_cards) do
            if v.ability.effect ~= 'Stone Card' then
                if not SMODS.has_no_suit(v) then
                    valid_castle_cards[#valid_castle_cards+1] = v
                end
            end
        end
        if valid_castle_cards[1] then 
            local castle_card = pseudorandom_element(valid_castle_cards, pseudoseed('cas'..G.GAME.round_resets.ante))
            G.GAME.current_round.castle_card.suit = castle_card.base.suit
        end
    end
end
'''
match_indent = true


    # Hook into To Do List
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'To Do List' and not context.blueprint then
'''
position = "at"
payload = '''
if self.ability.name == 'To Do List' and not context.blueprint and (not next(SMODS.find_card('j_mxms_stop_sign')) and G.GAME.round ~= 1) then
'''
match_indent = true
times = 1