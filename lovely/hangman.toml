[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

    # Apply Hangman search in get_striaght
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = '''
local four_fingers = next(SMODS.find_card('j_four_fingers'))
local can_skip = next(SMODS.find_card('j_shortcut'))
'''
position = "after"
payload = '''
local hangman = next(SMODS.find_card('j_mxms_hangman'))
local has_face_filled = false
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = '''
for _, val in ipairs(vals) do
	if init_vals[val] and not initial then br = true end
	if RANKS[val] then
		straight_length = straight_length + 1
		skipped_rank = false
		for _, vv in ipairs(RANKS[val]) do
			t[#t + 1] = vv
		end
		vals = SMODS.Ranks[val].next
		initial = false
		end_iter = true
		break
	end
end
if not end_iter then
	local new_vals = {}
	for _, val in ipairs(vals) do
		for _, r in ipairs(SMODS.Ranks[val].next) do
			table.insert(new_vals, r)
		end
	end
	vals = new_vals
	if can_skip and not skipped_rank then
		skipped_rank = true
	else
		straight_length = 0
		skipped_rank = false
		if not straight then t = {} end
		if straight then break end
	end
end
'''
position = "at"
payload = '''
for _, val in ipairs(vals) do
	if init_vals[val] and not initial then br = true end
	if RANKS[val] then
		straight_length = straight_length + 1
		skipped_rank = false
		for _, vv in ipairs(RANKS[val]) do
			t[#t + 1] = vv
		end
		vals = SMODS.Ranks[val].next
		initial = false
		end_iter = true
		break
	end
end
if not end_iter then
	local new_vals = {}
	for _, val in ipairs(vals) do
		for _, r in ipairs(SMODS.Ranks[val].next) do
			table.insert(new_vals, r)
		end
	end
	vals = new_vals
	if can_skip and not skipped_rank then
		skipped_rank = true
    elseif hangman and not has_face_filled then
      for _, val in ipairs(vals) do
        if SMODS.Ranks[val].face or SMODS.Ranks[val].shorthand == 'A' then
          straight_length = straight_length + 1
          has_face_filled = true
          for _, r in ipairs(SMODS.Ranks[val].next) do
            table.insert(new_vals, r)
          end
        end
      end
	else
		straight_length = 0
		skipped_rank = false
		if not straight then t = {} end
		if straight then break end
	end
end
'''
match_indent = true
times = 1