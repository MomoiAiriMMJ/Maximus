[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

#Change UI when Nuclear Deck is in use
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
{n=G.UIT.T, config={text = "X", lang = G.LANGUAGES['en-us'], scale = scale*2, colour = G.C.UI_MULT, shadow = true}},
'''
position = "at"
payload = '''
{n=G.UIT.T, config={text = G.GAME.modifiers.mxms_nuclear_size and "^" or "X", lang = G.LANGUAGES['en-us'], scale = scale*2, colour = G.C.UI_MULT, shadow = true}},
'''
match_indent = true
times = 1


#Change final score calc to do exponent math if Nuclear Deck is in use
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''
G.E_MANAGER:add_event(Event({
    trigger = 'after',delay = 0.4,
    func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)
    }))
    check_and_set_high_score('hand', hand_chips*mult)

    check_for_unlock({type = 'chip_score', chips = math.floor(hand_chips*mult)})
   
if hand_chips*mult > 0 then 
    delay(0.8)
    G.E_MANAGER:add_event(Event({
    trigger = 'immediate',
    func = (function() play_sound('chips2');return true end)
    }))
end
G.E_MANAGER:add_event(Event({
    trigger = 'ease',
    blocking = false,
    ref_table = G.GAME,
    ref_value = 'chips',
    ease_to = G.GAME.chips + math.floor(hand_chips*mult),
    delay =  0.5,
    func = (function(t) return math.floor(t) end)
}))
'''
position = "at"
payload = '''
if not G.GAME.modifiers.mxms_nuclear_size then
    G.E_MANAGER:add_event(Event({
        trigger = 'after',delay = 0.4,
        func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)
        }))
        check_and_set_high_score('hand', hand_chips*mult)

        check_for_unlock({type = 'chip_score', chips = math.floor(hand_chips*mult)})
    
    if hand_chips*mult > 0 then 
        delay(0.8)
        G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = (function() play_sound('chips2');return true end)
        }))
    end
    G.E_MANAGER:add_event(Event({
        trigger = 'ease',
        blocking = false,
        ref_table = G.GAME,
        ref_value = 'chips',
        ease_to = G.GAME.chips + math.floor(hand_chips*mult),
        delay =  0.5,
        func = (function(t) return math.floor(t) end)
    }))
else
    G.E_MANAGER:add_event(Event({
        trigger = 'after',delay = 0.4,
        func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips^mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)
        }))

        check_for_unlock({type = 'chip_score', chips = math.floor(hand_chips^mult)})
    
    if hand_chips*mult > 0 then 
        delay(0.8)
        G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = (function() play_sound('chips2');return true end)
        }))
    end
    G.E_MANAGER:add_event(Event({
        trigger = 'ease',
        blocking = false,
        ref_table = G.GAME,
        ref_value = 'chips',
        ease_to = G.GAME.chips + math.floor(hand_chips^mult),
        delay =  0.5,
        func = (function(t) return math.floor(t) end)
    }))
end
'''
match_indent = true
times = 1

#Talisman version of final score patch
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''
G.E_MANAGER:add_event(Event({
    trigger = 'after',delay = 0.4,
    func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)
    }))
    check_and_set_high_score('hand', hand_chips*mult)

    check_for_unlock({type = 'chip_score', chips = math.floor(hand_chips*mult)})
   
if to_big(hand_chips)*mult > to_big(0) then
    delay(0.8)
    G.E_MANAGER:add_event(Event({
    trigger = 'immediate',
    func = (function() play_sound('chips2');return true end)
    }))
end
G.E_MANAGER:add_event(Event({
    trigger = 'ease',
    blocking = false,
    ref_table = G.GAME,
    ref_value = 'chips',
    ease_to = G.GAME.chips + math.floor(hand_chips*mult),
    delay =  0.5,
    func = (function(t) return math.floor(t) end)
}))
'''
position = "at"
payload = '''
if not G.GAME.modifiers.mxms_nuclear_size then
    G.E_MANAGER:add_event(Event({
        trigger = 'after',delay = 0.4,
        func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)
        }))
        check_and_set_high_score('hand', hand_chips*mult)

        check_for_unlock({type = 'chip_score', chips = math.floor(hand_chips*mult)})
   
    if to_big(hand_chips)*mult > to_big(0) then
        delay(0.8)
        G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = (function() play_sound('chips2');return true end)
        }))
    end
    G.E_MANAGER:add_event(Event({
        trigger = 'ease',
        blocking = false,
        ref_table = G.GAME,
        ref_value = 'chips',
        ease_to = G.GAME.chips + math.floor(hand_chips*mult),
        delay =  0.5,
        func = (function(t) return math.floor(t) end)
    }))
else
    G.E_MANAGER:add_event(Event({
        trigger = 'after',delay = 0.4,
        func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips^mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)
        }))

        check_for_unlock({type = 'chip_score', chips = math.floor(hand_chips^mult)})
   
    if to_big(hand_chips)^mult > to_big(0) then
        delay(0.8)
        G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = (function() play_sound('chips2');return true end)
        }))
    end
    G.E_MANAGER:add_event(Event({
        trigger = 'ease',
        blocking = false,
        ref_table = G.GAME,
        ref_value = 'chips',
        ease_to = G.GAME.chips + math.floor(hand_chips^mult),
        delay =  0.5,
        func = (function(t) return math.floor(t) end)
    }))
end
'''
match_indent = true
times = 1

#Flames for Nuclear deck
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''
G.ARGS.score_intensity.earned_score = G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult
'''
position = "at"
payload = '''
if not G.GAME.modifiers.mxms_nuclear_size then
    G.ARGS.score_intensity.earned_score = G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult
else
    G.ARGS.score_intensity.earned_score = G.GAME.current_round.current_hand.chips^G.GAME.current_round.current_hand.mult
end
'''
match_indent = true
times = 1